package com.nr.fit.instrumentation.jdbc;

import java.sql.CallableStatement;
import java.sql.PreparedStatement;

import com.newrelic.api.agent.weaver.MatchType;
import com.newrelic.api.agent.weaver.Weave;
import com.newrelic.api.agent.weaver.Weaver;

@Weave(originalName="java.sql.Connection",type=MatchType.Interface)
public abstract class Connection_instrumentation {

	public PreparedStatement prepareStatement(String sql) {
		PreparedStatement stmt = Weaver.callOriginal();
		DBUtils.addBatchQuery(stmt.hashCode(), sql);
		DBUtils.addPreparedQuery(stmt.hashCode(), sql);
		return stmt;
	}
	
	public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) {
		PreparedStatement stmt = Weaver.callOriginal();
		DBUtils.addBatchQuery(stmt.hashCode(), sql);
		DBUtils.addPreparedQuery(stmt.hashCode(), sql);
		return stmt;
	}
	
	public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) {
		PreparedStatement stmt = Weaver.callOriginal();
		DBUtils.addBatchQuery(stmt.hashCode(), sql);
		DBUtils.addPreparedQuery(stmt.hashCode(), sql);
		return stmt;
	}
	
	public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) {
		PreparedStatement stmt = Weaver.callOriginal();
		DBUtils.addBatchQuery(stmt.hashCode(), sql);
		DBUtils.addPreparedQuery(stmt.hashCode(), sql);
		return stmt;
	}
	
	public PreparedStatement prepareStatement(String sql, int columnIndexes[]) {
		PreparedStatement stmt = Weaver.callOriginal();
		DBUtils.addBatchQuery(stmt.hashCode(), sql);
		DBUtils.addPreparedQuery(stmt.hashCode(), sql);
		return stmt;
	}
	
	public PreparedStatement prepareStatement(String sql, String columnNames[]) {
		PreparedStatement stmt = Weaver.callOriginal();
		DBUtils.addBatchQuery(stmt.hashCode(), sql);
		DBUtils.addPreparedQuery(stmt.hashCode(), sql);
		return stmt;
	}
	
	public CallableStatement prepareCall(String sql) {
		CallableStatement callable = Weaver.callOriginal();
		DBUtils.addBatchQuery(callable.hashCode(), sql);
		DBUtils.addPreparedQuery(callable.hashCode(), sql);
		return callable;
	}
	
	public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) {
		CallableStatement callable = Weaver.callOriginal();
		DBUtils.addBatchQuery(callable.hashCode(), sql);
		DBUtils.addPreparedQuery(callable.hashCode(), sql);
		return callable;
	}
	
	public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) {
		CallableStatement callable = Weaver.callOriginal();
		DBUtils.addBatchQuery(callable.hashCode(), sql);
		DBUtils.addPreparedQuery(callable.hashCode(), sql);
		return callable;
	}
}
